/**
 * @file fasade.h
 * @brief Определение класса Facade для управления 3D-моделью и её
 * представлением.
 *
 * Класс предоставляет интерфейс между логикой загрузки и обработки 3D-модели
 * и пользовательским интерфейсом. Он инкапсулирует модель, загрузчик, а также
 * методы для трансформации, отображения и записи изображения/анимации сцены.
 *
 * Также содержит сигналы для обновления визуального представления.
 */

#ifndef FASADE_H
#define FASADE_H

#include <QBuffer>
#include <QDateTime>
#include <QObject>
#include <QProcess>
#include <QQuickWindow>

#include "../core/model3d.h"
#include "linesgeometry.h"
#include "modelloader.h"
#include "saver.h"
#include "viewersettings.h"

namespace s21 {

/**
 * @class Facade
 * @brief Фасад для управления 3D-моделью, её трансформацией и
 * визуализацией.
 *
 * Класс предоставляет методы для:
 * - Загрузки .obj-модели.
 * - Поворота и сдвига модели.
 * - Создания представлений в виде вершин и рёбер.
 * - Записи кадра рендеринга и gif-анимации.
 *
 * Также отдаёт сигналы при изменении геометрии модели, которые могут
 * использоваться в пользовательском интерфейсе для обновления отображения
 * или статистики.
 */
class Facade : public QObject {
  Q_OBJECT
 public:
  /**
   * @brief Конструктор класса Facade.
   *
   * Инициализирует объект фасада, обеспечивающий взаимодействие между
   * QML-интерфейсом и внутренней логикой приложения, включая загрузку и
   * отображение 3D-моделей, а также управление их преобразованиями и
   * сохранением рендеров.
   *
   * Принимает опционального родителя для интеграции с объектной иерархией Qt.
   *
   * @param parent Родительский объект, передаваемый в базовый класс QObject.
   */
  explicit Facade(QObject* parent = nullptr);

  /**
   * @brief Загружает 3D-модель из указанного файла.
   *
   * Делегирует загрузку модели объекту `loader`, используя переданный путь.
   *
   * @param filePath Путь к .obj-файлу, содержащему 3D-модель.
   */
  Q_INVOKABLE void loadModel(const QString& filePath);

  /**
   * @brief Выполняет вращение загруженной модели вокруг трёх осей.
   *
   * Применяет аффинное преобразование вращения к текущей 3D-модели
   *
   * @param angleX Угол поворота вокруг оси X в градусах.
   * @param angleY Угол поворота вокруг оси Y в градусах.
   * @param angleZ Угол поворота вокруг оси Z в градусах.
   */
  Q_INVOKABLE void rotateModel(float angleX, float angleY, float angleZ);

  /**
   * @brief Смещает модель вдоль трёх осей.
   *
   * Применяет трансляцию к текущей модели в трёхмерном пространстве
   * и отдаёт сигнал об обновлении геометрии.
   *
   * @param angleX Смещение по оси X.
   * @param angleY Смещение по оси Y.
   * @param angleZ Смещение по оси Z.
   */
  Q_INVOKABLE void shiftModel(float angleX, float angleY, float angleZ);

  /**
   * @brief Создаёт и возвращает геометрию линий (ребер модели).
   *
   * Генерирует представление модели в виде линий (грани) и сохраняет его
   * во внутреннем указателе `currentgeometry`. Также отдаёт сигналы
   * об обновлении количества вершин и полигонов.
   *
   * @return Указатель на сгенерированную геометрию линий.
   */
  Q_INVOKABLE LinesGeometry* createLinesView();

  /**
   * @brief Создаёт и возвращает геометрию только вершин модели.
   *
   * Генерирует представление модели в виде только вершин (точек),
   * сохраняет результат в `currentgeometry`, и отдаёт сигналы
   * об обновлении количества вершин и полигонов.
   *
   * @return Указатель на сгенерированную геометрию вершин.
   */
  Q_INVOKABLE LinesGeometry* createVerticesView();

  /**
   * @brief Возвращает количество вершин в текущей геометрии.
   *
   * Если текущая геометрия (`currentgeometry`) не задана, возвращает 0.
   *
   * @return Количество вершин в текущем представлении модели.
   */
  Q_INVOKABLE int vertexCount() const;

  /**
   * @brief Возвращает количество полигонов в текущей геометрии.
   *
   * Если текущая геометрия (`currentgeometry`) не задана, возвращает 0.
   *
   * @return Количество полигонов (граней) в текущем представлении модели.
   */
  Q_INVOKABLE int polygonCount() const;

  /**
   * @brief Сохраняет текущее изображение из элемента QML в виде PNG-файла.
   *
   * Создает директорию `screencasts`, если она отсутствует. Делает захват
   * изображения с указанного QQuickItem, перекрашивает фон в белый, и сохраняет
   * результат в указанный путь.
   *
   * @param item Указатель на QML-объект (обычно `QQuickItem*`), из которого
   * будет захвачено изображение.
   * @param path Относительный путь и имя файла (в папке `screencasts`), в
   * который нужно сохранить изображение.
   */
  Q_INVOKABLE void saveRenderImage(QObject* item, const QString& path);  // jpg

  /**
   * @brief Запускает запись GIF-анимации с указанного элемента.
   *
   * Сохраняет 50 кадров (по 10 кадров в секунду, в течение 5 секунд) из объекта
   * QML (обычно `QQuickItem`). Кадры сохраняются в директорию `screencasts`,
   * после чего вызывается метод finishGifRecording().
   *
   * @param item Указатель на QML-объект, с которого будет происходить захват
   * кадров.
   */
  Q_INVOKABLE void startGifRecording(QObject* item);

 signals:
  /**
   * @brief Сигнал об изменении количества вершин.
   *
   * Эмитируется после генерации или обновления геометрии модели.
   */
  void vertexCountChanged();

  /**
   * @brief Сигнал об изменении количества полигонов (граней).
   *
   * Эмитируется после генерации или обновления геометрии модели.
   */
  void polygonCountChanged();

  /**
   * @brief Сигнал об обновлении геометрии модели.
   *
   * Эмитируется после трансформации модели (поворот или сдвиг),
   * чтобы уведомить интерфейс о необходимости обновить отрисовку.
   */
  void geometryUpdated();

 private:
  Saver saver;
  LinesGeometry* currentgeometry = nullptr;
  Model3D model;
  ModelLoader loader;
};  // class facade

}  // namespace s21

#endif